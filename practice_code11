#include<stdio.h>
#define MSG "i am a symbolic string constant."
#define MAXLENGTH 81
int main(void){
	char words[MAXLENGTH] = "i am spring in an array.";
	const char*pt1 = "something is pointing at me";
	puts("Here are some strings:");
	puts(MSG);
	puts(words);
		puts(pt1);
		words[8] = 'p';
		puts(words);

		return 0;

}
#include<stdio.h>
int main()
{
	int hang, sum = -1, n, i, yu, b, k; char a;
	scanf("%d %c", &n, &a);
	for (i = 1;; i++)
	{
		sum = sum + 2 * (2 * i - 1);
		if (n - sum<0) break;
		b = sum;
	}
	yu = n - b;
	hang = i - 1;
	for (i = hang; i>0; i--)
	{
		for (k = hang - i; k>0; k--)
			printf(" ");
		for (k = 1; k <= 2 * i - 1; k++)
			printf("%c", a);
		printf("\n");
	}
	for (i = 2; i <= hang; i++)
	{
		for (k = hang - i; k>0; k--)
			printf(" ");
		for (k = 1; k <= 2 * i - 1; k++)
			printf("%c", a);
		printf("\n");
	}
	printf("%d", yu);
	return 0;
}
#include<stdio.h>
#define STLEN 81
int main(void){
	char words[STLEN];

	puts("enter a string,please");
	gets(words);
	printf("your string twice:\n");
	printf("%s\n", words);
	puts(words);
	puts("Done.");

	return 0;

}
#include<stdio.h>
#define STLEN 14
int main(void){
	char words[STLEN];

	puts("Enter a string,please.");
	fgets(words, STLEN, stdin);
	printf("Your string twice (puts(),then fputs():\n");
	puts(words);
	fputs(words, stdout);
	puts("Enter another string please.");
	fgets(words, STLEN, stdin);
	printf("your string twice (puts(),then fputs():\n");
	puts(words);
	fputs(words, stdout);
	puts("Done.");

	return 0;

}

put2.c
#include<stdio.h>
void put1(const char*);
int put2(const char*);

int main(void)
{
	put1("if i'd as much money");
	put1("as i coulde spend.\n");
	printf("i count %d characters.\n", put2("i never would cry old chairs to mend."));

	return 0;

}
void put1(const char*string){
	while (*string)
		putchar(*string++);
}int put2(const char*string){
	int count = 0;
	while (*string){
		putchar(*string++);
		count++;
	}
	putchar('\n');
	return(count);
}  
#include<stdio.h>
#include<string.h>
void fit(char*, unsigned int);
int main(void){
	char mesg[] = "things shsould be as simple as possible,"
		          "but not simpler.";

	puts(mesg);
	fit(mesg, 38);
	puts(mesg);
	puts("let's look at some more of the string:");
	puts(mesg + 39);

	return 0;
}
void fit(char*string, unsigned int size)
{
	if (strlen(string) > size)
		string[size] = '\0';

}
#include<stdio.h>
#include<string.h>
#define SIZE 80
char *s_gets(char*st, int n);
int main(void){
	char flower[SIZE];
	char addon[] = "s smell ilke old shoes.";

		puts("what is your favorite flower?");
		if (s_gets(flower, SIZE)){
			strcat(flower, addon);
			puts(flower);
			puts(addon);
		}
		else
			puts("End of file encountered!");
		puts("Bye");

		return 0;
}
char*s_gets(char*st, int n){
	char*ret_val;
		int i = 0;
		ret_val = fgets(st, n, stdin);
		if (ret_val){
			while (st[i] != '\n'&&st[i] != '\0')
				i++;
			if (st[i] == '\n')
				st[i] = '\0';
			else
			while (getchar() != '\n')
				continue;

		}
		return ret_val;
}
#include<stdio.h>
#include<string.h>

#define ANSWER "Grant"
#define SIZE	40
char*s_gets(char*st, int n);
int main(void){
	char try[SIZE];

	puts("who is buried in Grant's tomb");
	s_gets(try, SIZE);
	while (strcmp(try, ANSWER) != 0){
		puts("No,thst's wrong,please try again.");
		s_gets(try, SIZE);

	}
	puts("that's right!");

	return 0;
}
char*s_gets(char*st, int n)
{
	char*ret_val;
	int i = 0;

	ret_val = fgets(st, n, stdin);
	if (ret_val)//等价于ret_val!=NULL;
	{
		while (st[i] != '\n'&&st[i] != '\0')
			i++;
		if (st[i] == '\n')
			st[i] = '\0';
		else
		while (getchar() != '\n')
			continue;


	}
	return ret_val;
}
#include<stdio.h>
#include<string.h>
#define SIZE 40
#define LIM 5
char *s_gets(char*st, int n);
int main(void){
	char qwords[LIM][SIZE];
	char temp[SIZE];
		int i = 0;
		printf("Enter %d words beginning with q:\n", LIM);
		while (i < LIM&&s_gets(temp, SIZE)){
			if (temp[0] != 'q')
				printf("%s doesn't begin with q!\n", temp);
			else{
				strcpy(qwords[i], temp);
				i++;
			}
		}
		puts("here are the words accepted:");
		for (i = 0; i < LIM; i++)
			puts(qwords[i]);
		return 0;

}
char*s_gets(char*st, int n){
		char*ret_val;
			int i = 0;
			ret_val = fgets(st, n, stdin);
			if (ret_val){
				while (st[i] != '\n'&&st[i] != '\0')
					i++;
				if (st[i] == '\n')
					st[i] = '\0';
				else
				while (getchar() != '\n')
					continue;
	
			}
			return ret_val;
	}
字符串排序这个有用**
#include<stdio.h>
#include<string.h>
#define SIZE 81
#define LIM 20
#define HALT ""
void stsrt(char*string[], int num);
char*s_gets(char*st, int n);

int main(void){
	char input[LIM][SIZE];
	char*ptstr[LIM];
	int ct = 0;
	int k;

	printf("Input uo to %d lines,and i will sort them.\n", LIM);
	printf("To stop,press the enter key at a line's start.\n");
	while (ct < LIM&&s_gets(input[ct], SIZE) != NULL&& input[ct][0] != '\0'){
		ptstr[ct] = input[ct];
		ct++;

	}
	stsrt(ptstr, ct);
	puts("\nhere's the sorted list:\n");
	for (k = 0; k < ct; k++)
		puts(ptstr[k]);
	return 0;
		
	} 

void stsrt(char*strings[], int num){
	char*temp;
	int top, seek;

	for (top = 0; top < num - 1; top++)
	for (seek = top + 1; seek < num; seek++)
	if (strcmp(strings[top], strings[seek])>0){
		temp =strings[top];
		strings[top] = strings[seek];
		strings[seek] = temp;
	}
}
char*s_gets(char*st, int n){
	char*ret_val;
	int i = 0;

	ret_val = fgets(st, n, stdin);
	if (ret_val)
	{
		while (st[i] != '\n'&&st[i] != '\0')
			i++;
		if (st[i] == '\n')
			st[i] = '\0';
		else
		while (getchar() != '\n')
			continue;
	}
	return ret_val;
}
#include <stdbool.h>
#include <math.h>
#include <stdio.h>
#include <string.h>
#include <stdlib.h>//malloc()

bool prime(int a){
	int i = 2;
	for (; i <= sqrt(a) + 1; i++){
		if (a%i == 0){
			return false;
		}
	}
	return true;
}

int main()
{
	int input;
	scanf("%d", &input);

	int count = 0;
	int p = 3;//2不考虑了，因为没有偶数素数对
	while (p <= input - 2){//边界一定要注意{不超过n}，由于下面有P+2所以这里边界要减去2
		if (prime(p) && prime(p + 2)){
			count++;
		}
		p += 2;//除了2再没有偶数素数，所以这里可以只考虑奇数
	}
	printf("%d", count);


	return 0;
}
