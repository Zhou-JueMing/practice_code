void swapInt(int &a, int &b){
	int temp = a;
	a = b;
	b = temp;
}
//交换两个浮点型数
void swapDouble(double &a, double &b){
	double temp = a;
	a = b;
	b = temp;
}

函数模板
template<typename T>


void mySwap(T &a, T &b){
	T temp = a;
	a = b;
	b = temp;
}
void test01(){
	int a = 10;
	int b = 20;

//	swapInt(a, b);
	mySwap(a, b);
	cout << "a=" << a << endl;

	double c = 1.1;
	double d = 2.2;
	swapDouble(c, d);
	cout << "c=" << c << endl;
}
int main(){
	test01();
	return 0;
}

template<class T>
void mySwap(T&a, T&b){
	T temp = a;
	a = b;
	b = temp;

}
void test01(){
	int a = 10;
	int b = 20;
	/*char c = "c";
	mySwap();*/ //不一致，推不出一致的T的类型
	mySwap(a, b);
	cout << "a=" << a << endl;
	cout << "b=" << b << endl;
}
template<class T>//必须要指定出T的数据类型
void func(){
	cout << "func 调用" << endl;
}
void test02(){
	func<int>();
}
int main(){
	test02();
	test01();
	system("pause");
	return 0;
}

template<class T>
void mySwap(T&a, T&b){
	T temp = a;
	a = b;
	b = temp;
}
template<class T>
void printArray(T arr[],int len){
	for (int i = 0; i < len; i++){
		cout << arr[i] << " ";

	}
	cout << endl;

}
template<class T>
void mySort(T arr[], int len){
	for (int i = 0; i < len; i++){
		int max = i;
		for (int j = i + 1; j < len; j++){
			if (arr[max] < arr[j]){
				max = j;
			}
		}
		if (max != i){
			mySwap(arr[max], arr[i]);
		}
	}
}
void test01(){
	char charArr[] = "bacedfiuhvcbq"; 
		int num = sizeof(charArr) / sizeof(char);
	mySort(charArr,num);
	printArray(charArr, num);
}
void test02(){
	int intArr[] = {1,5,3,7,8,3,9,4};
	int num = sizeof(intArr) / sizeof(int);
	mySort(intArr, num);
	printArray(intArr, num);
}
int main(){
	test01();
	test02();
}
void myPrint(int a,int b){
	cout << "调用的普通函数" << endl;
}
template<class T>
void myPrint(T a,T b){
	cout << "调用的函数模板" << endl;
}
void test01(){
	int a = 10;
	int b = 10;
	myPrint(a, b);
	myPrint<>(a, b);
}
int main(){
	test01();
}
#include<string>
class Person{
public:
	Person(string name, int age){
		this->m_Name = name;
		this->m_age = age;
	}
	string m_Name;
	int m_age;
};
template<class T>
bool myCompare(T&a, T&b){
	if (a == b){
		return true;
	}
	else{
		return false;
	}
}

template<>bool myCompare(Person &p1, Person &p2){
	if (p1.m_Name == p2.m_Name&&p1.m_age == p1.m_age){
		return true;
	}
	else{
		return false;
	}
}
void test01(){
	int a = 10;
	int b = 20;
	bool ret = myCompare(a,b);
	if (ret){
		cout << "a==b" << endl;
	}
	else{
		cout << "a!=b" << endl;
	}
}
void test02(){
	Person P1("tom", 10);
	Person P2("tom", 11);
	bool ret = myCompare(P1, P2);
	if (ret){
		cout << "p1==p2" << endl;
	}
	else{
		cout << "p1!=p2" << endl;
	}
}
int main(){
	test01();
	test02();
	return 0;
}
#include<string>
template<class NameType,class AgeType>
class Person{
public:
	Person(NameType name,AgeType age){
		   this->m_Name=name;
		   this->m_Age=age;

	}
	void showPerson(){
		cout << "name:" << this->m_Name << "age:" << this->m_Age << endl;
	}
	   NameType m_Name;
	   AgeType m_Age;
};
void test01(){
	Person<string, int> p1("孙悟空",999);
	p1.showPerson();
}
int main(){
	test01();
}
class Person1{
public:
	void showPerson2(){
		cout << "Person2 show" << endl;
	}
};
template<class T>
class MyClass{
public:
	T obj;
	void func1(){
		obj.showPerson1();
	}
	void func2(){
		obj.showPerson1();
	}
};
template<class T1,class T2>
class Person{
public:
	Person(T1 name, T2 age){
		this->m_Name = name;
		this->m_Age = age;
}
	void showPerson(){
		cout << "姓名: " << this->m_Name << "  年龄: " << this->m_Age << endl;
	}
	T1 m_Name;
	T2 m_Age;
};
void printPerson1(Person<string, int>&p){
	p.showPerson();

}
void test01(){
	Person<string, int>p("孙悟空",100);
	printPerson1(p);
}
template<class T1,class T2>
void printPerson2(Person<T1, T2>&p){
	p.showPerson();
	cout << "T1的类型为 " << typeid(T1).name() << endl;
	cout << "T2的类型为 " << typeid(T2).name() << endl;
}
void test02(){
	Person<string, int>p("猪八戒", 90);
	printPerson2(p);
}
template<class T>
void printPerson3(T&P){
	cout << "T的类型为 " << typeid(T).name() << endl;
	P.showPerson();
}
void test03(){
	Person<string, int>p("唐僧", 30);
	printPerson3(p);
}
int main(){
	test01();
	test02();
	test03();
	return 0;
}
class Java
{
public:
	/*void header(){
		cout << "首页、公开课、登录、注册···（公共顶部）" << endl;

	}
	void footer(){
		cout << "帮助中心、交流与合作、站内地图···（公共底部）" << endl;
	}
	void left(){
		cout << "java、python、c++···（公共列表分类）" << endl;
	}
	void content(){
		cout << "java学科视频" << endl;
	}*/
};
class python
{public:
	void header(){
		cout << "首页、公开课、登录、注册···（公共顶部）" << endl;

	}
	void footer(){
		cout << "帮助中心、交流与合作、站内地图···（公共底部）" << endl;
	}
	void left(){
		cout << "java、python、c++···（公共列表分类）" << endl;
	}
	void content(){
		cout << "python学科视频" << endl;
	}
};
class Cpp
{
public:
	void header(){
		cout << "首页、公开课、登录、注册···（公共顶部）" << endl;

	}
	void footer(){
		cout << "帮助中心、交流与合作、站内地图···（公共底部）" << endl;
	}
	void left(){
		cout << "java、python、c++···（公共列表分类）" << endl;
	}
	void content(){
		cout << "Cpp学科视频" << endl;
	}
};
class BasePage
{
public:
	void header(){
		cout << "首页、公开课、登录、注册···（公共顶部）" << endl;

	}
	void footer(){
		cout << "帮助中心、交流与合作、站内地图···（公共底部）" << endl;
	}
	void left(){
		cout << "java、python、c++···（公共列表分类）" << endl;
	}
};
class Java :public BasePage{
public:
	void content(){
		cout << "Java视频下载页面：     " << endl;
	}
};
class Cpp :public BasePage{
public:
	void content(){
		cout << "cpp视频下载页面：     " << endl;
	}
};
class Python :public BasePage{
public:
	void content(){
		cout << "python视频下载页面：     " << endl;
	}
};
void test01(){
	cout << "java下载页面如下：" << endl;

	Java ja;
	ja.header();
	ja.footer();
	ja.left();
	ja.content();

	cout << "--------------------------------------" << endl;

	cout << "python下载页面如下：" << endl;
	Python py;
	py.header();
	py.footer();
	py.left();
	py.content();

	cout << "--------------------------------------" << endl;

	cout << "Cpp下载页面如下：" << endl;
	Cpp cp;
	cp.header();
	cp.footer();
	cp.left();
	cp.content();

}
int main(){
	test01();
}
class Base1{
public:int m_A;
protected: int m_B;
private:int m_C;

};
class son1 :public Base1{
public:void func(){
		   m_A = 10;
		   m_B =10;
		  /* m_C = 10;*/
}
}; 
void test01(){
	son1 s1;
	s1.m_A = 100;
///*s1.m_B = 100;*/保护权限在类内可以访问，在内外不可以访问
}
class Base2{
public:int m_A;
protected: int m_B;
private:int m_C;

};
class son2 :protected Base2{
public:
	void func(){
		m_A = 100;
		m_B = 100;
	/*	m_C = 100;*/

}
};
void test02(){
	son2 s2;
	s2.m_A=100 
}
class Base{
public:int m_A;
protected:int m_B;
private:int m_C;
};

class son :public Base{
public:int m_D;
};
void test01(){
	cout << "size of son=" << sizeof(son) << endl;
}
int main(){
	test01();
}
class Base{
	public:
		Base(){
			cout << "base构造函数！" << endl;

		}
		~Base(){
			cout << "Base析构函数！" << endl;
		}

};
class son:public Base{
public:
	son(){
		cout << "son析构函数！" << endl;
	}
	~son(){
		cout << "son的析构函数" << endl;
	}

};
void test01(){
	Base b;
	son s;
}
int main(){
	test01();
	return 0;
}
class Base{
public:
	Base(){
		m_A = 100;
	}
	int m_A;
	void func(){
		cout << "base-func 调用" << endl;
	}
};
class son :public Base{
public:
	son(){
		m_A = 200;
	}
	int m_A;
	void func(){
		cout << "son-func 调用" << endl;
	}
};
void test01()
{
	son s;
	cout << " son 下的m_A = " << s.m_A << endl;
	cout << "base 下的 m_A=" << s.Base::m_A << endl;
}
void test02(){
	son s;
	s.func();
	s.Base::func();
}
int main(){
	test01();
	test02();
}
class Base{
public:
	static int m_A;
	static void func(){
		cout << "Base-static void func()" << endl;
	}
		
};
int Base::m_A = 100;
class son :public Base{
public :
	static int m_A;
	static void func(){
		cout << "son-static void func()" << endl;
	}
};
int son::m_A = 200;
//void test01(){
//	cout << "通过对象访问" << endl;
//	son s;
//	cout << "m_A=" << s.m_A << endl;
//	cout << "父类下的m_A" << s.Base::m_A << endl;
//	cout << "通过类名访问" << endl;
//	cout << "son 下m_A=" << son::m_A << endl;
//	cout << "Base 下m_A=" << son::Base::m_A << endl;
//}
void test02(){
	//通过对象访问
	cout << "通过对象访问" << endl;
	son s;
	s.func();
	s.Base::func();

	cout << "通过对象访问" << endl;
	son::func();
	son::Base::func();
}
int main(){
	test02();
}
class Animal{
public:
	  virtual void speak(){
		cout << "动物在说话" << endl;
	}
};
class Cat :public Animal{
public:
	void speak()
	{
		cout << "小猫在说话" << endl;
	}
};
void doSpeak(Animal&animal){
	animal.speak();

}
void test01(){
	Cat cat;
	doSpeak(cat);
}
void test02(){
	cout << "sizeof Animal=" << sizeof(Animal) << endl;
}
int main(){
	test01();
	test02();
}
#include<string>
class Caculator{
public:

	int getResult(string oper){
		if (oper == "+"){
			return m_Num1 + m_Num2;
		}
		else if (oper == "-"){
			return m_Num1 - m_Num2;
		}
		else if (oper == "*"){
			return m_Num1*m_Num2;

		}
		else{
			return m_Num1 / m_Num2;
		}
	}

		int m_Num1;
	int m_Num2;
};
void test01(){
	Caculator c;
	c.m_Num1 = 10;
	c.m_Num2 = 20;
	cout << c.m_Num1 << "+" << c.m_Num2 << "=" << c.getResult("+") << endl;
	cout << c.m_Num1 << "-"<< c.m_Num2 << "=" << c.getResult("-") << endl;
	cout << c.m_Num1 << "*" << c.m_Num2 << "=" << c.getResult("*") << endl;
	cout << c.m_Num1 << "/" << c.m_Num2 << "=" << c.getResult("/") << endl;
}
class AbstractCaculator{
public:
	virtual int getResult(){
		return 0;

	}
	int m_Num1;
	int m_Num2;
};
class AddClculator :public AbstractCaculator{
public:
	 int getResult(){
		return m_Num1+m_Num2;

	}
};
class SubClculator :public AbstractCaculator{
public:
	int getResult(){
		return m_Num1 +-m_Num2;

	}
}; 
class MulClculator :public AbstractCaculator{
public:
	int getResult(){
		return m_Num1 *m_Num2;

	}
};

void test02(){
	AbstractCaculator*abc = new AddClculator;
	abc->m_Num1 = 10;
	abc->m_Num2 = 20;
	cout << abc->m_Num1 << "+" << abc->m_Num2 << "=" << abc->getResult() << endl;
	delete abc;

	abc = new SubClculator;
	abc->m_Num1 = 10;
	abc->m_Num2 = 20;
	cout << abc->m_Num1 << "-" << abc->m_Num2 << "=" << abc->getResult() << endl;

	delete abc;
	abc = new MulClculator;
	abc->m_Num1 = 10;
	abc->m_Num2 = 20;
	cout << abc->m_Num1 << "*" << abc->m_Num2 << "=" << abc->getResult() << endl;
}
int main(){
	test02();
	return 0;
}
#include<fstream>

void test01(){
	ofstream ofs;

	ofs.open("test.txt", ios::out);

		ofs << "姓名：张三" << endl;
		ofs << "性别：男" << endl;

		ofs.close();
}
#include<string>;
void test02(){
	ifstream ifs;

	ifs.open("test.txt", ios::in);

	if (!ifs.is_open()){
		cout << "文件打开失败" << endl;
		return;
	}
	char buf[1024] = { 0 };
	while (ifs >> buf){
		cout << buf << endl;
	}
	
	char buf[1024] = { 0 };
	while (ifs.getline(buf, sizeof(buf))){
		cout << buf << endl;
	}
	
	string buf;

	while (getline(ifs, buf)){
		cout << buf << endl;
	}
	ifs.close();
}
int main(){
	/*test01();*/
	test02();
}
class Person{
public:
	char m_Name[64];
	int m_Age;

};
void test01(){
	ofstream ofs;

	ofs.open("person.txt", ios::out | ios::binary);
	Person p = { "张三", 18 };
	ofs.write((const char*)&p, sizeof(Person));
	ofs.close();
}
void test02(){
	ifstream ifs;

	ifs.open("person.txt", ios::in | ios::binary);
	if (!ifs.is_open()){
		cout << "文件打开失败" << endl;
	}
	Person p;
	ifs.read((char*)&p, sizeof(Person));

	cout << "姓名：  " << p.m_Name << "年龄：  " << p.m_Age;

	ifs.close();
}
int main(){
	test02();
}
