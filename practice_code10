#define _CRT_SECURE_NO_WARNINGS 1
#include<stdio.h>
#define MONTHS 12

int main(void){
	int days[MONTHS] = { 31, 28, 31, 30, 31,30, 31, 31, 30, 31, 30, 31 };
	int index;

	for (index = 0; index < MONTHS; index++)
		printf("Months %2d has %2d days.\n", index + 1, days[index]); 

	return 0;
}
#include<stdio.h>
int main(void){
	const int days[] = { 31, 28, 31, 30, 31, 31, 30, 31, 31, 30, 31 };
	int index;

	for (index = 0; index < sizeof days / sizeof days[0]; index++)
		printf("MONTH %2d has %d days.\n", index + 1, days[index]);
	return 0;
}
#include<stdio.h>
#define MONTHS 12
#define YEARS 5
int main(void){
	const float rain[YEARS][MONTHS] =
	{
		{ 4.3, 4.3, 4.3, 3.0, 2.0, 1.2, 0.2, 0.2, 0.2, 0.4, 2.4, 6.6 },
		{ 4.3, 4.3, 4.3, 3.0, 2.0, 1.2, 0.2, 0.2, 0.2, 0.4, 2.4, 6.6 },
		{ 4.3, 4.3, 4.3, 3.0, 2.0, 1.2, 0.2, 0.2, 0.2, 0.4, 2.4, 6.6 },
		{ 4.3, 4.3, 4.3, 3.0, 2.0, 1.2, 0.2, 0.2, 0.2, 0.4, 2.4, 6.6 },
		{ 4.3, 4.3, 4.3, 3.0, 2.0, 1.2, 0.2, 0.2, 0.2, 0.4, 2.4, 6.6 },

	};
	int year, month;
	float subtot, total;

	printf(" year rainfall (inches)\n");
	for (year = 0, total = 0; year < YEARS; year++){

		for (month = 0, subtot = 0; month < MONTHS; month++)
			subtot += rain[year][month];
		printf("%5d %15.1f\n",2010 + year, subtot);
		total += subtot;

	}
	printf("\n the yearly average is %.1f inches.\n\n", total / YEARS);
	printf("MONTHLY AVERAGES:\n\n");
	printf("jan feb mar apr may jun jul aug sep oct");
	printf("nov dec\n");

	for (month = 0; month < MONTHS; month++){
		for (year = 0, subtot = 0; year < YEARS; year++)
			subtot += rain[year][month];
		printf("%4.1f", subtot / YEARS);

	}
	printf("\n");

	return 0;
}
#include<stdio.h>
#define SIZE 4
int main(void){
	short dates[SIZE];
	short*pti;
	short index;
	double bills[SIZE];
	double*ptf;
	pti = dates;
	ptf = bills;
	printf("%23s %15s\n", "short", "double");
	for (index = 0; index < SIZE; index++)
		printf("pointers+%d:%10p %10p\n", index, pti + index, ptf + index);
	return 0;
}
#include<stdio.h>
#define MONTH 12
int main(void){
	int days[MONTH] = { 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31 };
	int index;

	for (index = 0; index < MONTH; index++)
		printf("MONTH %2d has %d days.\n", index + 1, *(days + index));
	return 0;
}
#include<stdio.h>
#define SIZE 10
int sum(int ar[], int n);
int main(void){
	int marbles[SIZE] = { 20, 10, 5, 39, 4, 16, 19, 26, 31, 20 };
	long answer;

	answer = sum(marbles, SIZE);
	printf(" the total number of marbles is %d.\n", answer);
	printf("the size of marbles is %lu bytes.\n", sizeof marbles);
	return 0;
}
int sum(int ar[], int n){
	int i;
	int total = 0;

	for (i = 0; i < n; i++)
		total += ar[i];
	printf("the size of ar is %lu bytes .\n", sizeof ar);
		return total;
}
#include<stdio.h>
#define SIZE 10
int sump(int*start, int*end);
int main(void){
	int marbles[SIZE] = { 20, 10, 5, 39, 4, 16, 19, 26, 31, 20 };
	long answer;

	answer = sump(marbles, marbles + SIZE);
	printf("THE total number of marbles is %ld.\n", answer);

	return 0;
}
int sump(int*start, int*end)
{
	int total = 0;

	while (start < end){
		total += *start;
		start++;
	}
	return total;
}
#include<stdio.h>
int data[2] = { 100, 200 };
int moredate[2] = { 300, 400 };
int main(void){
	int*p1, *p2, *p3;
	p1 = p2 = data;
	p3 = moredate;
	printf("*p1=%d,*p2=%d, *p3=%d\n", *p1, *p2, *p3);
	printf("*p1++=%d,*++p2=%d,(*p3)++=%d\n", *p1++, *++p2, (*p3)++);
	printf("*p1=%d,*p2=%d,*p3=%d\n", *p1, *p2, *p3);

	return 0;

}
#include<stdio.h>
#define SIZE 5
void show_array(const double ar[], int n);
void mult_array(double ar[], int n, double mult);
int main(void)
{
	double dip[SIZE] = { 20.0, 17.66, 8.2, 15.3, 22.22 };
	printf("the original dip array:\n");
	show_array(dip, SIZE);
	mult_array(dip, SIZE, 2.5);
	printf("the dip array after calling mult_array():\n");
	show_array(dip, SIZE);
	
	return 0;
}

void show_array(const double ar[], int n)
{
	int i;

	for (i = 0; i < n; i++){
		printf("%8.3f", ar[i]);
	}
	putchar('\n');

}
void mult_array(double ar[], int n, double mult){

	int i;

	for (i = 0; i < n; i++)
		ar[i] *= mult;

}
#include<stdio.h>
int main(void)
{
	int zippo[4][2] = { { 2, 4 }, { 6, 8 }, { 1, 3 }, { 5, 7 } };
	int(*pz)[2];
	pz = zippo;

	printf("pz=%p,pz+1=%p\n", pz, pz + 1);
	printf("pz[0]=%p,pz[0]+1=%p\n", pz[0], pz[0] + 1);
	printf("*pz=%p,*pz+1=%p\n", *pz, *pz + 1);
	printf("pz[0][0]=%d\n", pz[0][0]);
	printf("*pz[0]=%d\n", *pz[0]);
	printf("**pz=%d\n", **pz);
	printf("       *pz[2][1]=%d\n", pz[2][1]);
	printf("*(*(pz+2)+1)=%d\n", *(*(pz + 2) + 1));

	return 0;
}
#include<stdio.h>
int steps(int n, int m);
int main(void)
{
	int x;
	int y = 0;
	printf("please enter a number(n<=1000):\n");
	scanf("%d", &x);
	steps(x, y);
	printf("the steps you are needed=%d", y);
	return 0;
}
int steps(int n, int m){
	
	while (n <= 1000 && n >= 0){
		if (n % 2 == 0){
			n = n / 2;
			m++;
		}
		else if (n % 2 != 0){
			n =3*n+1 ;
			n = n / 2;
			m++;
		}
		else(n == 1);

	}
	return m;
}
#include<stdio.h>
#define ROWS 3
#define COLS 4
void sum_rows(int ar[][COLS], int rows);
void sum_cols(int[][COLS], int);
int sum2d(int(*ar)[COLS], int rows);
int main(void){
	int junk[ROWS][COLS] = {
		{ 2,4,6, 8},
		{3,5,7,9},
		{12,10,8,6}
	};
	sum_rows(junk, ROWS);
	sum_cols(junk, COLS);
	printf("sum of all elements=%d\n", sum2d(junk, ROWS));

	return 0;
}
void sum_rows(int ar[][COLS], int rows){
	int r, c, tot;
	for (r = 0; r < rows; r++){
		tot = 0;
		for (c = 0; c < COLS; c++)
			tot += ar[r][c];
		printf("row %d:sum=%d\n", r, tot);
	}
}
void sum_cols(int ar[][COLS], int rows){
	int r, c, tot;
	for (c = 0; c < COLS; c++){
		tot = 0;
		for (r = 0; r < rows; r++)
			tot += ar[r][c];
		printf("col %d:sum=%d\n", c, tot);
	}
}
int sum2d(int ar[][COLS], int rows)
{
	int r, c, tot = 0;
	for (r = 0; r < rows;r++)
	for (c = 0; c < COLS; c++)
		tot += ar[r][c];
	return tot;
}

