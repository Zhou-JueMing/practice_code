#define _CRT_SECURE_NO_WARNINGS 1
book.c
#include<stdio.h>
#include<string.h>
char*s_gets(char*st, int n);
#define MAXTITL 41
#define MAXAUTL 31
struct book{
	char title[MAXTITL];
	char author[MAXAUTL];
	float value;

};
int main(void){
	struct book library;
	printf("Please enter the book title.\n");
	s_gets(library.title, MAXTITL);
	printf("Please enter the author.\n");
	s_gets(library.author, MAXAUTL);
	printf("Now enter the value.\n");
	scanf("%f", &library.value);
	printf("%S by %s:$%.2f\n", library.title, library.author, library.value);
	printf("%s:\"%s\"($%.2f)\n", library.author, library.title, library.value);
	printf("Done.\n");
	return 0;
}
char*s_gets(char *st, int n){
	char*ret_val;
	char*find;

	ret_val = fgets(st, n, stdin);
	if (ret_val){
		find = strchr(st, '\n');
		if (find) 
			*find = '\0';
		else
		while (getchar() != '\n')
			continue;
		
	}
	return ret_val;
}
#include<stdio.h>
#include<string.h>
char*s_gets(char*st, int n);
#define MAXTITL 40
#define MAXAUTL 40
#define MAXBKS 100
struct book{
	char title[MAXTITL];
	char author[MAXAUTL];
	float value;
};
int main(void){
	struct book library[MAXBKS];
	int count = 0;
	int index;

	printf("please enter the book title:\n");
	printf("press the enter an the start of a line to stop.\n");
	while (count < MAXBKS&&s_gets(library[count].title, MAXTITL) != NULL&&library[count].title[0] != '\0')
	{
		printf("Now enter the author.\n");
		s_gets(library[count].author, MAXAUTL);
		printf("Now enter the value.\n");
		scanf("%f", &library[count++].value);
		while (getchar() != '\n')
			continue;
		if (count < MAXBKS)
			printf("Enter the next title.\n");
	}

	if (count>0){
		printf("Here is the list of your books:\n");
		for (index = 0; index < count; index++){
			printf("%s by %s:$%.2f\n", library[index].title, library[index].author, library[index].value);
		}
	}
	else
		printf("No books?Too bad.\n");
	
	return 0;
	}
char*s_gets(char *st, int n){
	char*ret_val;
	char*find;

	ret_val = fgets(st, n, stdin);
	if (ret_val){
		find = strchr(st, '\n');
		if (find) 
			*find = '\0';
		else
		while (getchar() != '\n')
			continue;
		
	}
	return ret_val;
}
funds.c
#include<stdio.h>
#define FUNDLEN 50
struct funds{
	char bank[FUNDLEN];
	double bankfund;
	char save[FUNDLEN];
	double savefund;
};
double sum(struct funds moolah);
int main(void){
	struct funds stan =
	{ "china bank",
	4032.27,
	"Luck's saving and Loan",
	8543.94,
	};
	printf("stan has a total of $%.2f.\n", sum(stan));

	return 0;
}
double sum(struct funds moolah){
	return(moolah.bankfund + moolah.savefund);
}
#include<stdio.h>
#include<string.h>

#define NLEN 30
struct namect{
	char fname[NLEN];
	char lname[NLEN];
	int letters;
};
struct namect getinfo(void);
struct namect makeinfo(struct namect);
void showinfo(struct namect);
char*s_gets(char*st, int n);

int main(void){
	struct namect person;

	person = getinfo();
	person = makeinfo(person);
	showinfo(person);
	return 0;
}
struct namect getinfo(void){
	struct namect temp;
	printf("please enter your first name.\n");
	s_gets(temp.fname, NLEN);
	printf("please enter your last name.\n");
	s_gets(temp.lname, NLEN);
	return temp;
}
struct namect makeinfo(struct namect info)
{
	info.letters = strlen(info.fname) + strlen(info.lname);
	return info;
}
void showinfo(struct namect info){
	printf("%s %s,your name contains %d letters.\n", info.fname, info.lname, info.letters);

}
char*s_gets(char*st, int n){
	char*ret_val;
	char*find;

	ret_val = fgets(st, n, stdin);
	if (ret_val){
		find = strchr(st, '\n');
		if (find)
			*find = '\0';
		else
		while (getchar() != '\n')
			continue;
	}
	return ret_val;
}
names3.c
#include<stdio.h>
#include<string.h>
#include<stdlib.h>
#define SLEN 81
struct namect{
	char*fname;
	char*lname;
	int letters;
};
void getinfo(struct namect *);
void  makeinfo(struct namect*);
void showinfo(const struct namect*);
void cleanup(struct namect*);
char*s_gets(char*st, int n);

int main(void){
	struct namect person;

	getinfo(&person);
	makeinfo(&person);
	showinfo(&person);
	cleanup(&person);

	return 0;
}
void getinfo(struct namect *pst)
{
	char temp[SLEN];
	printf("Please enter your first name.\n");
	s_gets(temp, SLEN);
	pst->fname = (char*)malloc(strlen(temp) + 1);
	strcpy(pst->fname, temp);
	printf("Please enter your last name.\n");
	s_gets(temp, SLEN);
	pst->lname = (char*)malloc(strlen(temp) + 1);
	strcpy(pst->lname, temp);

}

void  makeinfo(struct namect*pst)
{
	pst->letters = strlen(pst->fname) + strlen(pst->lname);
}
void showinfo(const struct namect*pst)
{
	printf("%s %s,your name contains %d letters.\n", pst->fname, pst->lname, pst->letters);
}
void cleanup(struct namect*pst)
{
	free(pst->fname);
	free(pst->lname);
}
char*s_gets(char*st, int n){
		char*ret_val;
		char*find;
	
		ret_val = fgets(st, n, stdin);
		if (ret_val){
			find = strchr(st, '\n');
			if (find)
				*find = '\0';
			else
			while (getchar() != '\n')
				continue;
		}
		return ret_val;
}
#include<stdio.h>
#define FUNDLEN 50
#define N 2
struct funds{
	char bank[FUNDLEN];
	double bankfund;
	char save[FUNDLEN];
	double savefund;
};
double sum(const struct funds money[], int n);
int main(void)
{
	struct funds jones[N] =
	{ {
		"CHINA BANK",
		4032.27,
		"ZHOU's savings and loan",
		8543.94,
	},
	{
		"SICHUAN BANK",
		3620.88,
		"party time savings",
		3802.91,
	}

	};
	printf("The joneses have a total of $%.2f.\n", sum(jones, N));
	return 0;
}
double sum(const struct funds money[], int n)
{
	double total;
	int i;

	for (i = 0, total = 0; i < n; i++)
		total += money[i].bankfund + money[i].savefund;
	return(total);
}
enum.c
#include<stdio.h>
#include<string.h>
#include<stdbool.h>
char*s_gets(char*st, int n);

enum spectrum{red,orange,yellow,green,blue,violet};
const char*colors[] = { "red", "orange", "yellow", "green", "blue", "violet" };
#define LEN 30

int main(void){
	char choice[LEN];
	enum spectrum color;
	bool color_is_found = false;

	puts("Enter a color(empty line to quit):\n");
	while (s_gets(choice, LEN) != NULL&&choice[0] != '\0'){
		for (color = red; color <= violet; color++)
		{
			if (strcmp(choice, colors[color]) == 0){
				color_is_found = true;
				break;
			}
		}
	}if (color_is_found)
		switch (color){
		case red:puts("Rose are red.");
			break;
		case orange:puts("poppies are orange.");
			break;
		case yellow:puts("sunflowers are yellow.");
			break;
		case green:puts("Grass is green.");
			break;
		case blue:puts("bluebells are blue.");
			break;
		case violet:puts("Violets are violet.");
			break;
	}
	else
		printf("Id dom't know about the color %s.\n", choice);
	color_is_found = false;
	puts("Next color,please(empty line to quit):");
	puts("Goodbye!");

	return 0;

}
char*s_gets(char*st, int n){
			char*ret_val;
			char*find;
		
			ret_val = fgets(st, n, stdin);
			if (ret_val){
				find = strchr(st, '\n');
				if (find)
					*find = '\0';
				else
				while (getchar() != '\n')
					continue;
			}
			return ret_val;
	}
