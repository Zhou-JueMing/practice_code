#define _CRT_SECURE_NO_WARNINGS 1
int main(){
	return 1;
}
#include<iostream>
int main(){
	std::cout << "Enter two numbers:" << std::endl;
	int v1 = 0, v2 = 0;
	std::cin >> v1 >> v2;
	std::cout << "the sum of" << v1 << "and" << v2 << "is" << v1 + v2 << std::endl;
	return 0;

}
#include<iostream>
int main()
{
	std::cout << "hello,world" << std::endl;
	return 0;
}
#include<iostream>
int main(){
	std::cout << "please enter two integers\n" << std::endl;
	int v1 = 0, v2 = 0;
	std::cin >> v1 >> v2;
	std::cout << "the product of" << v1 << " and "<<v2 << " is " << v1*v2 << std::endl;
	return 0;
}
#include<iostream>
int main(){
	std::cout << "hello "<< std::endl;
	std::cout << "world" << std::endl;
	std::cout << "please enter the year" << std::endl;
	int Years;
	std::cin >> Years;
	std::cout << "the year is" << Years << std::endl;
	return 0;

}
#include<iostream>
int main(){
	std::cout <</*"*/"/*"/*"*/;
		return 0;
}
#include<iostream>
int main(){
	int sum = 0, val = 1;
	while (val <= 10000){
		sum += val;
		++val;
	}
	std::cout << "sum of 1 to 10 inclusive is"
		<< sum << std::endl;
	return 0;
}
#include<iostream>
int main(){
	int sum = 0, val = 10;
	while (val >=0){
		sum += val;
		--val;
	}
	std::cout << "sum of 10 to 0 inclusive is"
		<< sum << std::endl;
	return 0;
}
#include<iostream>
int main(){
	int v1, v2, v3;
	std::cin >> v1 >> v2;
	while (v1 <= v2){
	std::cout << v1 << std::endl;
	v1++;
	}while (v2 <=v1){
		std::cout << v2 << std::endl;
		v2++;
	}
	return 0;

}
#include<iostream>
#define MAX 10
using namespace std;
int main(){
	const int a = 20;
	cout << "hello world" <<" is "<< MAX  << a << endl;
	system("pause");
	return 0;
}
#include<iostream>
using namespace std;
int main(){
	int a = 0;
	cout << "给整形变量a赋值" << endl;
	cin >> a;
	cout << a << endl;
	return 0;

}
#include<iostream>
using namespace std;
int main(){
	int score = 0;
	cout << "请您输入一个分数：" << endl;
	cin >> score;
	cout << "您的分数为：" <<   score   << endl;
	if (score >= 600){
		cout << "考上一本大学" << endl;
		if (score >= 700)
			cout << "您考入的大学是："<<"北京大学" << endl;
		else if (score >= 650)
			cout << "您考入的大学是：" << "清华大学" << endl;
		else
			cout << "您考入的大学是：" << "中国人民大学" << endl;
	}
	else if (score >= 500)
		cout << "考上二本大学" << endl;
	else if (score >= 400)
		cout << "考上三本大学" << endl;
	else
		cout << "未考上大学" << endl;
	return 0;

}
#include<iostream>
using namespace std;
int main(){
	int weight1 = 0, weight2 = 0,weight3 = 0;
	cout << "please enter the weight of pig1,2,3:" << endl;
	cin >> weight1 >> weight2 >> weight3;
	if (weight1 > weight2){
		if (weight1 >= weight3){
			cout << "pig1" << endl;
		}
		else
			cout << "pig3" << endl;
	}
	if (weight1 <weight2){
		if (weight2 >= weight3){
			cout << "pig2" << endl;
		}
		else
			cout << "pig3" << endl;
	}
	return 0;
}
#include<iostream>
using namespace std;
int main(){
	cout << "请您输入您的分数：" << endl;
	int score;
	cin >> score;
	cout << "您输入的分数为：" << score << endl;
	switch (score){


	case 10:
		cout << "您认为是经典电影" << endl;
		break;
	case 9:
		cout << "您认为是经典电影" << endl;
		break;
	case 8:
		cout << "您认为是好电影" << endl;
		break;
	case 7:
		cout << "您认为是好电影" << endl;
		break;
	case 6:
		cout << "您认为电影一般" << endl;
		break;
	case 5:
		cout << "您认为电影一般" << endl;
		break;
	default:
		cout << "大烂片一部" << endl;
		break;
	
	}
	return 0;
}
#include<iostream>
using namespace std;
int main(){
	int i = 0;
	while (i <= 10){
		cout << i << endl;
		i++;
	}
	return 0;
}
#include<iostream>
#include<ctime>
using namespace std;
int main(){
	srand((unsigned)time(NULL));
	int Number=rand() % 100 + 1;
	/*cout << Number << endl;*/
	while (1){
	int val = 0;
	cin >> val;
		if (val > Number)
			cout << "猜测过大了";
		else if (val < Number)
			cout << "猜测过小了";
		else
		{
			cout << "猜对了";
			break;
		}
		system("pause");
	}
	return 0;
}
#include<iostream>
using namespace std;
int main(){
	int num = 100;
	do{
		int a = 0, b = 0, c = 0;
		a = num % 10;
		b = num / 10 % 10;
		c = num / 100;
		if (a*a*a + b*b*b + c*c*c == num){

			cout << num << endl;
		}
		num++;
	} while (num < 1000);
	return 0;
}
#include<iostream>
using namespace std;
int main(){
	for (int i = 0; i < 10; i++){
		cout << i << endl;
	}
	return 0;
}
#include<iostream>
using namespace std;
int main(){
	for (int i = 1; i < 100; i++){
		if(i % 7 == 0 || i % 10 == 7 || i / 10 == 7){
			cout << i   <<  "敲桌子" << endl;
		}
		else
		cout << i << endl;
	}
	return 0;
}
Status GetElem(LinkList L, int i, ElemType &e){
	p->next; j = 1;
	while (p&&j < i){
		p = p->next;
		++j;
	}
	if (!p || j>1)return ERROR;
	e = p->data;
	return ok;
}
#include<iostream>
using namespace std;
int main(){
	for (int i = 1; i <= 9; i++){
		for (int j = 1; j <= i; j++){
			cout <<  j  << "*" << i <<"= "<<" "<<j*i<<"  ";
		}
		cout << endl;
	}
	return 0;
}
#include<iostream>
using namespace std;
int main(){
	/*int arr[5] = { 300, 350, 200, 400, 250 };
	int max = 0;
	for (int i = 0; i < 5; i++){
		if (arr[i]>max){
			max = arr[i];
		}
	}
	cout << "最重的小猪重量为：" << max << endl;*/
	/*int arr[5] = { 1, 3, 2, 5, 4 };
	for (int i = 0; i < 5; i++){
		{
			cout << arr[i] << endl;
		}
		int start = 0;
		int end = sizeof(arr) / sizeof(arr[0]) - 1;
		while (start < end){


			int temp = arr[start];
			arr[start] = arr[end];
			arr[end] = temp;


			start++;
			end--;
		}
		cout << arr[i] << endl;
	}
	return 0;
}*/
#include<iostream>
using namespace std;
int main(){
	int arr[9] = { 4, 2, 8, 0, 5, 7, 1, 3, 9 };
	cout << "排序前" << endl;
	for (int i = 0; i < 9; i++){
		cout << arr[i] << "   ";
	}
	cout << endl;
	for (int i = 0; i < 9 - 1; i++){
		for (int j = 0; j < 9 - i - 1; j++){
			if (arr[j]>arr[j + 1]){
				int temp = arr[j];
				arr[j] = arr[j + 1];
				arr[j + 1] = temp;
			}
		}
	}
	cout << "排序后" << endl;
	for (int j = 0; j < 9; j++){
		cout << arr[j] << "   ";
}
	return 0;
}
#include<iostream>
#include "swap.h"
using namespace std;
#include<string>
void swap02(int*p1, int*p2);
int main(){
	/*int arr[2][3] = {
		{ 1, 2, 3 },
		{ 4, 5, 6 } };
	for (int i = 0; i < 2; i++){
		for (int j = 0; j < 3; j++){
			cout << arr[i][j] << endl;
		}

	}*/
	/*string names[3] = { "张三", "李四", "王五" };
	int score[3][3] = {
		{ 100, 100, 100 },
		{ 90, 50, 100 },
		{60,70,80}
	};
	for (int i = 0; i < 3; i++){
		int sum = 0;
		for (int j = 0; j < 3; j++){
			sum += score[i][j];
		}
		cout << names[i] << "的分数是" <<"  "<< sum << "  ";
		cout << endl;
	}*/
	/*int a = 10;
	int b = 20;
	swap(a, b);*/
	/*int arr[10] = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 };
	int*p = arr;
	for (int i = 0; i < 10; i++){
		cout << "第"<<i+1<<"个元素是" << *p << endl;
		p++;
	}*/
	/*int a = 10;
	int b = 20;
	cout <<"a的地址是"<< &a << endl;
	cout <<"b的地址是"<< &b << endl;
	cout << "a=" << a << endl;
	cout << "b=" << b << endl;

	swap02(&a, &b);
	cout << "a=" << a << endl;
	cout << "b=" << b << endl;

	cout << "a的地址是" << &a << endl;
	cout << "b的地址是" << &b << endl;
	return 0;
}
void swap02(int *p1, int*p2){
	int temp = *p1;
		*p1 = *p2;
	*p2 = temp;
}*/

#include<iostream>
#include<string>
using namespace std;
struct Student{
	string name;
	int age;
	int score;
}s3;
int main(){//第一种初始方式：

	struct Student s1;
	s1.name = "张三";
	s1.age = 18;
	s1.score = 100;
	cout << "姓名为  " << s1.name << "   " << "年龄  " << s1.age << "   " << "分数" << "   "<<s1.score << endl;
	
	第二种初始方式
	struct Student s2= { "李四", 19, 80};
	cout << "姓名为  " << s2.name << "   " << "年龄  " << s2.age << "   " << "分数" << "   " << s2.score << endl;

	第三种定义方式
	s3.name = "王五";
	s3.age = 19;
	s3.score = 70;
	cout << "姓名为  " << s3.name << "   " << "年龄  " << s3.age << "   " << "分数" << "   " << s3.score << endl;
		
}
#include<iostream>
#include<string>
#include<ctime>
using namespace std;
struct student{
	string sname;
	int score;
};
struct teacher{
	string tname;
	int age;
	struct student sarray[5];
};

void allocateSpace(struct teacher tarray[], int len){
	string nameseed = "ABCDE";
	for (int i = 0; i < len; i++){
		tarray[i].tname = "Teacher_";
		tarray[i].tname += nameseed[i];
		for ( int j = 0; j < 5; j++){


			tarray[i].sarray[j].sname = "Student_";
			tarray[i].sarray[j].sname += nameseed[j];

			int random = rand() % 61 + 40;
			tarray[i].sarray[j].score = random;
		}
	}
}
void printfinfo(struct teacher tarray[], int len){
	for (int i = 0; i < len; i++){
		cout << "老师姓名  " << tarray[i].tname << endl;
		for (int j = 0; j < 5; j++){
			cout << " \t学生姓名   " << tarray[i].sarray[j].sname <<
				"考试分数    " << tarray[i].sarray[j].score << endl;
		}
	}
}
int main(){
	srand((unsigned int)time(NULL));
	/*struct Student StuArray[3] = {
		{ "张三", 18, 100 },
		{ "李四",20,99 },
		{ "王五",18,80 }
	};
	StuArray[2].name = "赵六";
	for (int i = 0; i < 3; i++){
		cout << "姓名：  " << StuArray[i].name
			<< "年龄：   " << StuArray[i].age
			<< "分数：   " << StuArray[i].score << endl;
	}*/
	/*struct student s = {"张三", 18, 100};
	struct student*p = &s;
	cout << "姓名为  " << p->name << "年龄为：  " << p->age << "分数为：  " << p->score << endl;*/
	/*teacher t;
	t.id = 10000;
	t.name = "老王";
	t.age = 50;
	t.stu.name = "小王";
	t.stu.age = 20;
	t.stu.score = 100;
	cout << "姓名为  " << t.id << "  年龄为：  " <<  << "分数为：  " << p->score << endl; */

	/*struct teacher tarray[3];
	int len = sizeof(tarray) / sizeof(tarray[0]);
	allocateSpace(tarray, len);
	printfinfo(tarray, len);

	return 0;

}*/
#include<iostream>
using namespace std;
void mySwap01(int a, int b){
	int temp = a;
	a = b;
	b = temp;
}
void mySwap02(int*a, int*b){
	int temp = *a;
	*a = *b;
		*b = temp;
	
}
void mySwap03(int &a, int &b){
	int temp = a;
	a = b;
	b = temp;
}
int main(){
	int a = 10;
	int b = 20;

	/*mySwap01(a, b);
	cout << "a=  " << a << endl;
	cout << "b=  " << b << endl;

	mySwap02(&a, &b);
	cout << "a=  " << a << endl;
	cout << "b=  " << b << endl;*/

	/*mySwap03(a, b);
	cout << "a=  " << a << endl;
	cout << "b=  " << b << endl;*/

	值传递，形参不会改变实参
	/*cout << "a=  " << a << endl;
	cout << "b=  " << b << endl;*/

	/*return 0;

}*/
#include<iostream>
using namespace std;
int func(int a, int b, int c = 20){
	return (a + b + c);
}
int main(){
	int sum = func(10, 20);
	cout << sum << endl;
	return 0;
}
#define _CRT_SECURE_NO_WARNINGS 1
#include<iostream>
#include<vector>
#include<string>
#include<deque>
#include<algorithm>
#include<stack>
#include<queue>
#include<list>
#include<set>
using namespace std;

template<class T>
class Base{
	T m;

};
class Son :public Base<int>{

};
void test01(){
	Son s1;
}
template<class T1, class T2>
class Son2{
public:
	Son2(){
		cout << "T1的类型为：  " << typeid(T1).name() << endl;
	}
	T1 obj;
};
void test02(){
	Son2<int, char>s2;
}
int main(){
	test02();

}
template <class T1,class T2>
class Person{
public:Person(T1 name, T2 age);
	   void showPerson();
	   T1 m_Name;
	   T2 m_Age;
};

void test01(){
	Person<string,int>p("Tom",18);
	p.showPerson();
}
int main(){
	test01();
}
#include<string>
template<class T1,class T2>
class Person{

	friend void printPerson（Person<T1, T2> p){
		cout << "姓名为：  " << p.m_Name << "年龄为：  " << p.m_Age << endl;
	}

public:person(T1 name,T2 age){
		this->m_Name = name;
		this->m_Age = age;
	}
private:
	T1 m_Name;
	T2 m_Age;
};

void  test01(){
	Person<string, int> p("TOM",20);
}
int main(){
	test01();
}
void myPrint(int val){
	cout << val << endl;
}
void test01(){
	vector<int> v;
	v.push_back(10);
	v.push_back(20);
	v.push_back(30);
	v.push_back(40);

	/*vector<int>::iterator itBegin = v.begin();
	vector<int>::iterator itEnd = v.end();

	while (itBegin != itEnd){
		cout << *itBegin << endl;
		itBegin++;
	}*/
	/*for (vector<int>::iterator it = v.begin(); it != v.end(); it++){
		cout << *it << endl;

	}*/
	/*for_each(v.begin(), v.end(), myPrint);
}
int main(){
	test01();
}*/
class Person
{
public:
	Person(string name,int age){
		this->m_Name = name;
		this->m_age = age;

	}

	string m_Name;
	int m_age;
};
void test01(){
	vector<Person>v;
	Person p1("a", 10);
	Person p2("b", 20);
	Person p3("c", 30);
	Person p4("d", 40);

	v.push_back(p1);
	v.push_back(p2);
	v.push_back(p3);
	v.push_back(p4);

	for (vector<Person>::iterator it = v.begin(); it != v.end(); it++){
		/*cout << "姓名为：  "<<(*it).m_Name << "年龄为：  " << (*it).m_age << endl;*/
		cout << "姓名为：  " << it->m_Name << "年龄为：  " << it->m_age << endl;
	}
}
void test02(){
	vector<Person*>v;
	Person p1("a", 10);
	Person p2("b", 20);
	Person p3("c", 30);
	Person p4("d", 40);

	v.push_back(&p1);
	v.push_back(&p2);
	v.push_back(&p3);
	v.push_back(&p4);

	for (vector<Person *>::iterator it = v.begin(); it != v.end(); it++){
		cout << "姓名为：  " << (*it)->m_Name << "年龄为：  " << (*it)->m_age << endl;
	}
}
int main(){
	test01();
	test02();
}
string构造函数
void test01(){
	string s1;
	const  char*str = "hello world !";
		string s2(str);
		cout << "s2=  " << s2 << endl;

		string s3(s2);
		cout << "s3=  " << s3 << endl;

		string s4(10, 'a');
		cout << "s4=  " << s4<< endl;
}
int main(){
	test01();
}

void test01(){
	string str1;
	str1 = "hello world";
	cout << "str1=:  " << str1 << endl;


		string str2;
		str2 = str1;
		cout << "str2=:  " << str2 << endl;

		string str3;
		str3 = 'a';
		cout << "str3=   " << str3 << endl;

		string str4;
		str4.assign("hello c++");
		cout << "str4    " << str4 << endl;

		string str5;
		str5.assign("hello c++", 5);
		cout << "str5:    " << str5 << endl;

}
int main(){
	test01();
}
void test01(){
	string str1 = "我";
	str1 += "爱玩游戏";
	cout << "str1:   " << str1 << endl;

	str1 += ':';
	cout << "str1:   " << str1 << endl;

	string str2 = "LOL DNF";
	str1 += str2;
	cout << "str1:   " << str1 << endl;

	string str3 = "I ";
	str3.append("love ");
	cout << "str3:   " << str3 << endl;

	str3.append("game abcde", 5);
	cout << "str3:   " << str3 << endl;

	str3.append(str2,4,3);
	cout << "str3= " << str3 << endl;


}


int main(){
	test01();
}
void test01(){
	string str1 = "abcdefgde";

	int pos=str1.find("de");
	if (pos == -1){
		cout << "没有找到哟~" << endl;
	}
	else{
		cout << " 找到了哟 pos=  " << pos << endl;
	}

	int pos2 = str1.rfind("de");
	if (pos2 == -1){
		cout << "没有找到哟~" << endl;
	}
	else{
		cout << " 找到了哟 pos2=  " << pos2 << endl;
	}
	
}
void test02(){
	string str1 = "abcdefgh";
	str1.replace(1, 3, "1111");
	cout << "str1= " << str1 << endl;
}
int main(){
	test01();
	test02();
}
void test01(){
	string str1 = "abcdefg";
	string str2 = "abcdefg";
	if (str1.compare(str2) == 0){
		cout << "str1等于str2" << endl;
	}
	else if (str1.compare(str2) >0){
		cout << "str1大于str2" << endl;
	}
	else{
		cout << "str1小于str2" << endl;
	}
}
int main(){
	test01();
}
void test01(){
	string str1 = "hello";
	cout << "str=  " << str1<<endl;
	for (int i = 0; i < str1.size(); i++){
		cout << str1[i] << " ";
	}
	cout << endl;
	for (int i = 0; i < str1.size(); i++){
		cout << str1.at(i) << "  ";

	}
	cout << endl;

	str1[0] = 'x';
	str1.at(2) = 'y';
	cout << "str1=  " << str1 << endl;
}
void test01(){
	string str = "hello";
	/*str.insert(1, "111");
	cout << "str=  " << str << endl;

	str.erase(1, 3);
		cout << "str=  " << str << endl;*/
	/*string substr = str.substr(1, 3);
	cout << "substr=  " << substr << endl;
}
void test02(){
	string email = "2956045288@qq.com";
	int pos = email.find("@");
	cout << pos << endl;

	string username = email.substr(0, pos);

	cout <<username << endl;
}
int main(){
	test01();
	test02();
}*/
void printVector(vector<int>&v){
	for (vector<int>::iterator it = v.begin(); it != v.end(); it++){
		cout << *it << "  ";

	}
	cout << endl;
}
void test01(){
	vector<int>v1;
	for (int i = 0; i < 10; i++){
		v1.push_back(i);
	}
	printVector(v1);
	//通过区间进行构造
	vector<int>v2(v1.begin(), v1.end());
		printVector(v2);

		//几个elem的方式来进行构造
		vector<int>v3(10, 100);
		printVector(v3);
}
void test01(){
	vector<int>v1;
	for (int i = 0; i < 10; i++){
		v1.push_back(i);
	}
	printVector(v1);

	vector<int>v2;
	v2 = v1;
	printVector(v2);

	vector<int>v3;
	v3.assign(v1.begin(), v1.end());
	printVector(v3);

	vector<int>v4;
	v4.assign(10, 100);
	printVector(v4);
}
void test01(){
	vector<int>v1;
	for (int i = 0; i < 10; i++){
		v1.push_back(i);
	}
	printVector(v1);

	if (v1.empty()){
		cout << "v1为空" << endl;
	}
	else{
		cout << "v1不为空" << endl;
		cout << "v1的容量为：   " << v1.capacity() << endl;
		cout << "v1的大小为：   " << v1.size() << endl;
	}
	//重新指定大小
	v1.resize(5);

	printVector(v1);
}
void test01(){
	vector<int>v1;

	v1.push_back(10);
	v1.push_back(20);
	v1.push_back(30);
	v1.push_back(40);
	v1.push_back(50);
	//遍历
	printVector(v1);

//尾删
	v1.pop_back();
	printVector(v1);
	//插入(第一个参数是迭代器）
	v1.insert(v1.begin(), 100);
     printVector(v1);
	 v1.insert(v1.begin(), 2, 100);
	 printVector(v1);
	 //删除
	 v1.erase(v1.begin());
	 printVector(v1);
	 //清空
	 v1.erase(v1.begin(), v1.end());
	 v1.clear();
	 printVector(v1);
}
void test01(){
	vector<int>v1;
	for (int i = 0; i < 10; i++){
		v1.push_back(i);
	}

	for (int i = 0; i < v1.size(); i++){
		cout << v1[i] << " "; }
	cout << endl;

	for (int i = 0; i < v1.size(); i++){
		cout << v1.at(i) << " ";
	}
	cout << endl;

	获取第一个元素
	cout << "第一个元素为： " << v1.front() << endl;
	cout << "最后一个元素为： " << v1.back() << endl;
}
void test01(){
	vector<int>v1;
	for (int i = 0; i < 10; i++){
		v1.push_back(i);

	}
	cout << "交换前：   " << endl;
	printVector(v1);

	vector<int>v2;
	for (int i = 10; i>0; i--){
		v2.push_back(i);
	}
	printVector(v2);

	cout << "交换后：   " << endl;
	v1.swap(v2);
	printVector(v1);
	printVector(v2);
}
void test02(){
	vector<int>v;
	for (int i = 0; i < 1000000; i++){
		v.push_back(i);
	}
	cout << "v的容量为：  " << v.capacity() << endl;
	cout << "v的大小为：  " << v.size() << endl;

	v.resize(3);
	cout << "v的容量为：  " << v.capacity() << endl;
	cout << "v的大小为：  " << v.size() << endl;

	//巧用swap收缩
	vector<int>(v).swap(v);
	cout << "v的容量为：  " << v.capacity() << endl;
	cout << "v的大小为：  " << v.size() << endl;

}
预留空间
void test01(){
	vector<int>v;


	v.reserve(100000);
	int num = 0;
	int *p = NULL;
	for (int i = 0; i < 100000; i++)
	{
		v.push_back(i);

		if (p != &v[0]){
			p = &v[0];
			num++;
		}
	}
	cout << "num=  " << num << endl;
}
void printDeque(deque<int>&d){
	for (deque<int>::const_iterator it = d.begin(); it != d.end(); it++){
		
		cout << *it << " ";

	}
	cout << endl;
}
void test01(){
	deque<int>d1;
	for (int i = 0; i < 10; i++){
		d1.push_back(i);
	}
	printDeque(d1);

	deque<int>d2(d1.begin(), d1.end());
		printDeque(d2);

		deque<int>d3(10, 100);
		printDeque(d3);

		deque<int>d4(d3);
		printDeque(d4);

}
void test01(){
	deque<int>d1;
	for (int i = 0; i < 10; i++){
		d1.push_back(i);
	}
	printDeque(d1);

	if (d1.empty()){
		cout << "d1为空" << endl;
	}
	else{
		cout << "d1不为空" << endl;
		cout << "d1的大小为" <<d1.size()<< endl;
	}
	d1.resize(15, 1);
		printDeque(d1);
}
void test01(){
	deque<int>d1;

	d1.push_back(10);
	d1.push_back(20);

	d1.push_front(100);
	d1.push_front(200);
	printDeque(d1);

	//尾删
	d1.pop_back();
	printDeque(d1);

	d1.pop_front();
	printDeque(d1);

}
void test02(){
	deque<int>d1;

	d1.push_back(10);
	d1.push_back(20);
	d1.push_front(100);
	d1.push_front(200);

	printDeque(d1);

	//insert插入
	d1.insert(d1.begin(), 1000);
	printDeque(d1);

	d1.insert(d1.begin(),3,  10000);
	printDeque(d1);

	//按照区间插入
	deque<int>d2;
	d2.push_back(1);
	d2.push_back(2);
	d2.push_back(3);

	d1.insert(d1.end(), d2.begin(), d2.end());
	printDeque(d1);
}
void test03(){
	deque<int>d1;

	d1.push_back(10);
	d1.push_back(20);
	d1.push_front(100);
	d1.push_front(200);

	deque<int>::iterator it = d1.begin();
	it++;
	d1.erase(it);
	printDeque(d1);

	//按照区间来删除
	/*d1.erase(d1.begin(), d1.end());
	printDeque(d1);*/
	//清空操作
	d1.clear();
	printDeque(d1);
}
void test01(){
	deque<int>d;

	d.push_back(10);
	d.push_back(20);
	d.push_back(30);

	d.push_front(100);
	d.push_front(200);
	d.push_front(300);
	通过【】的方式来访问元素
	/*for (int i = 0; i < d.size(); i++){
		cout << d[i] << " ";
	}
	cout << endl;
	for (int i = 0; i < d.size(); i++){
		cout << d.at(i) << " ";
	}
	cout << endl;
	cout << " 头元素为：  " << d.front() << endl;*/

	printDeque(d);
	sort(d.begin(), d.end());
	cout << "排序后：  " << endl;
	printDeque(d);

}
int main(){
	test01();
	/*test02();*/
	/*test03();*/
}
void test01(){
	stack<int>s;

	s.push(10);
	s.push(20);
	s.push(30);
	s.push(40);

	cout << "栈的大小为：  " << s.size() << endl;
	while (!s.empty()){
		cout << "栈顶元素为：  " << s.top() << endl;
		s.pop();
	}
	

	cout << "栈的大小为：  " << s.size() << endl;
}
class Person{
public:
	Person(string name, int age){
		this->m_Name = name;
		this->m_Age = age;
	}
	string m_Name;
	int m_Age;
};
void test01(){
	queue<Person>q;

	Person p1("唐僧",30);
	Person p2("孙悟空", 1000);
	Person p3("猪八戒", 900);
	Person p4("沙僧", 800);


	q.push(p1);
	q.push(p2);
	q.push(p3);
	q.push(p4);

	cout << "队列大小为：  " << q.size() << endl;
	while (!q.empty()){
		cout << "队头元素--姓名" << q.front().m_Name << " 年龄：  " << q.front().m_Age << endl;
		cout << "队尾元素--姓名" << q.back().m_Name << " 年龄：  " << q.back().m_Age << endl;
		q.pop();
	}
	cout << "队列大小为：  " << q.size() << endl;
}
void listPrint(const list<int>&L){
	for (list<int>::const_iterator it = L.begin(); it != L.end(); it++){
		cout << *it << " ";

	}
	cout << endl;
}
void test01(){
	list<int>L1;

	L1.push_back(10);
	L1.push_back(20);
	L1.push_back(30); 
	L1.push_back(40);

	listPrint(L1);

	//区间的方法构造
	list<int>L2(L1.begin(), L1.end());
		listPrint(L2);

	//拷贝构造
	list<int>L3(L2);
		listPrint(L3);

	//n个elem构造
	list<int>L4(10, 100);
		listPrint(L4);

}
void test01(){
	list<int>L1;
	L1.push_back(10);
	L1.push_back(20);
	L1.push_back(30);
	L1.push_back(40);
	listPrint(L1);

	list<int>L2;
	L2 = L1;
	listPrint(L2);

	list<int>L3;
	L3.assign(L2.begin(), L2.end());
	listPrint(L3);

	list<int>L4;
	L4.assign(10, 1);
	listPrint(L4);
}
void test02(){
	list<int>L1;
	L1.push_back(10);
	L1.push_back(20);
	L1.push_back(30);
	L1.push_back(40);

	list<int>L2;
	L2.assign(10, 100);
	cout << "交换前： " << endl;
	listPrint(L1);
	listPrint(L2);

	L1.swap(L2);
	cout << "交换后： " << endl;
	listPrint(L1);
	listPrint(L2);

}
void test01(){
	list<int>L1;
	L1.push_back(10);
	L1.push_back(20);
	L1.push_back(30);
	L1.push_back(40);
	listPrint(L1);

	if (L1.empty()){
		cout << "L1为空" << endl;
	}
	else{
		cout << "L1不为空" << endl;
		cout << "L1的元素个数为： " << endl;
	}
	//重新指定大小
	L1.resize(10);
	listPrint(L1);

}
void test01(){
	list<int>L;
	//尾插
	
	L.push_back(10);
	L.push_back(20);
	L.push_back(30);
	L.push_back(40);

	//头插
	L.push_front(1);
	L.push_front(2);
	L.push_front(3);
	L.push_front(4);

	listPrint(L);
	//尾删
	L.pop_back();
	listPrint(L);
	//头删
	L.pop_front();
	listPrint(L);

	//insert插入
	list<int>::iterator it = L.begin();
	cout << "请输入您需要插入的位置：  " << endl;
	int pos;
	cin >> pos;
	for (int i = 0; i < pos; i++){
		it++;
	}
	L.insert(it, 100);
	listPrint(L);
	it = L.begin();
	L.erase(++it);
	listPrint(L);

	//移除
	L.remove(100);
	listPrint(L);

	L.clear();
	listPrint(L);
}
void test01(){
	list<int>L1;
	L1.push_back(10);
	L1.push_back(20);
	L1.push_back(30);
	L1.push_back(40);

	cout << "第一个元素为：  " << L1.front() << endl;
	cout << "最后一个元素为：  " << L1.back() << endl;

	list<int>::iterator it = L1.begin();
	cout << "请输入您要查询的位置：  " << endl;
	int pos;
	cin >> pos;
	for (int i = 0; i < pos; i++){
		it++;
	}
	cout << "第" << pos << "个元素为：  " << L1.begin();
}
bool myCompare(int v1, int v2){
	return v1 > v2;
}
void test01(){
	list<int>L1;
	L1.push_back(40);
	L1.push_back(50);
	L1.push_back(80);
	L1.push_back(30);
	L1.push_back(20);
	cout << "反转前：  " << endl;
	listPrint(L1);
	L1.reverse();
	cout << "反转后：  " << endl;
	listPrint(L1);

	cout << "排序前：  " << endl;
	listPrint(L1);
	L1.sort();
	cout << "排序后：  " << endl;
	listPrint(L1);

	//从大到小排序
	L1.sort(myCompare);
	listPrint(L1);
}
void printSet(set<int>&s){
	for (set<int>::iterator it = s.begin(); it != s.end(); it++){
		cout << *it << " ";
	}
	cout << endl;
}
void test01(){
	set<int>s1;
	s1.insert(10);
	s1.insert(40);
	s1.insert(20);
	s1.insert(30);
	s1.insert(30);

	printSet(s1);

	set<int>s2(s1);
	printSet(s2);

	set<int>s3;
	s3 = s2;
	printSet(s3);

}
void test01(){
	set<int>s1;
	s1.insert(10);
	s1.insert(70);
	s1.insert(30);
	s1.insert(40);

	printSet(s1);
	if (s1.empty()){
		cout << "s1为空" << endl;
	}
	else{
		cout << "s1不为空： " <<endl;
		cout << "s1的大小为： " << s1.size() << endl;
	}

	set<int>s2;
	s2.insert(100);
	s2.insert(700);
	s2.insert(300);
	s2.insert(400);
	cout << "交换前：  " << endl;
	printSet(s1);
	printSet(s2);

	s1.swap(s2);
	cout << "交换后：  " << endl;
	printSet(s1);
	printSet(s2);
}
void test01(){
	set<int>s1;
	s1.insert(10);
	s1.insert(20);
	s1.insert(30);
	s1.insert(40);
	printSet(s1);

	s1.erase(s1.begin());
	printSet(s1);

	s1.erase(30);
	printSet(s1);

	s1.clear();
	printSet(s1);

}

int main(){
	test01();
	
	
}
#define _CRT_SECURE_NO_WARNINGS 1
#include<iostream>
#include<vector>
#include<deque>
#include<algorithm>
#include<stack>
#include<queue>
#include<list>
#include<set>
#include<map>
#include<functional>
#include<string>
#include<ctime>
#include<numeric>
using namespace std;

void test01(){
	set<int>s1;

	s1.insert(10);
	s1.insert(30);
	s1.insert(90);
	s1.insert(50);
	s1.insert(70);

	set<int>::iterator pos = s1.find(30);
	if (pos != s1.end()){
		cout << "找到元素：" <<*pos<< endl;
	}
	else{
		cout << "没有找到哟~" << endl;
	}

}
void test02(){
	set<int>s1;

	s1.insert(10);
	s1.insert(30);
	s1.insert(90);
	s1.insert(30);
	s1.insert(70);
	
	int num = s1.count(30);
	cout << "num:  " << num<<endl;
}
void test01(){
	pair<string, int>p("tom", 20);
	cout << "姓名为：" << p.first << "年龄为： " << p.second << endl;

	pair<string, int>p2 = make_pair("jerry", 19);
	cout << "姓名为：" << p2.first << "年龄为： " << p2.second << endl;
}
class myCompare{
public:
	bool operator()(int v1, int v2){
		return v1 > v2;
	}
};
void setPrint(set<int>&s){
	for (set<int>::iterator it = s.begin(); it != s.end(); it++){
		cout << *it << " ";
	}
	cout << endl;
}
void test01(){
	set<int>s1;

	s1.insert(10);
	s1.insert(16);
	s1.insert(15);
	s1.insert(19);
	s1.insert(43);
	s1.insert(32);

	setPrint(s1);
	set<int, myCompare>s2;

	s2.insert(10);
	s2.insert(16);
	s2.insert(15);
	s2.insert(19);
	s2.insert(43);
	s2.insert(32);
	for (set<int, myCompare>::iterator it = s2.begin(); it != s2.end(); it++)
	{
		cout << *it << " ";
	}
	cout << endl;
}
class Person{
public:

	Person(string name, int age){
		this->m_Name = name;
		this->m_Age = age;
	}
	string m_Name;
	int m_Age;
};
class Compare{
public:
	bool operator()(const Person&p1, const Person&p2){
		return p1.m_Age > p2.m_Age;
	}
};
void test02(){
	set<Person,Compare>s;

	Person p1("刘备", 24);
	Person p2("b", 28);
	Person p3("c", 27);
	Person p4("d", 29);

	s.insert(p1);
	s.insert(p2);
	s.insert(p3);
	s.insert(p4);
	for (set<Person,Compare>::iterator it = s.begin(); it != s.end(); it++){
		cout << "姓名为： " << (*it).m_Name << "   年龄为： " << (*it).m_Age << endl;

	}
	
}
void mapPrint(map<int, int>&m){
	for (map<int, int>::iterator it = m.begin(); it != m.end(); it++){
		cout << "key值为：  " << it->first << "   value值为：  " << it->second << endl;
	}
}
void test01(){
	map<int, int>m;

	m.insert(pair<int, int>(1, 10));
	m.insert(pair<int, int>(3, 20));
	m.insert(pair<int, int>(2, 30));
	m.insert(pair<int, int>(4, 40));
	m.insert(pair<int, int>(5, 50));

	mapPrint(m);
	//拷贝构造
	map<int, int>m2(m);
	mapPrint(m2);

	//赋值
	map<int, int>m3;
	m3 = m2;
	mapPrint(m3);
}

void test01(){
	map<int, int>m;
	m.insert(pair<int, int>(3, 30));
	m.insert(pair<int, int>(4, 40));
	m.insert(pair<int, int>(5, 50));
	m.insert(pair<int, int>(2, 20));
	m.insert(pair<int, int>(1, 10));

	if (m.empty()){
		cout << "m为空 " << endl;
	}
	else{
		cout << "m不为空 " << endl;
		cout << "m的大小为：" << m.size() << endl;
	}
}
void test02(){
	/*map<int, int>m;
	m.insert(pair<int, int>(3, 30));
	m.insert(pair<int, int>(4, 40));
	m.insert(pair<int, int>(5, 50));
	m.insert(pair<int, int>(2, 20));
	m.insert(pair<int, int>(1, 10));*/
	map<int, int>m2;
	m2.insert(pair<int, int>(6, 60));
	m2.insert(pair<int, int>(7, 70));
	m2.insert(pair<int, int>(8, 80));
	m2.insert(pair<int, int>(9, 90));
	cout << "交换前：  " << endl;
	mapPrint(m);
	mapPrint(m2);
	m.swap(m2);
	cout << "交换后：  " << endl;
	mapPrint(m);
	mapPrint(m2);

}
void test01(){
	map<int, int>m;

	m.insert(pair<int, int>(1, 10));

	m.insert(make_pair(2, 20));

	m.insert(map<int, int>::value_type(3, 30));
	主要用途是通过key寻找value
	m[4] = 40;

	

	m.erase(m.begin());
	m.erase(3);
	mapPrint(m);
	m.erase(m.begin(), m.end()); \
		m.clear();
}
class compare{
public:
	bool operator()(int v1, int v2){
		return v1 > v2;
	}
};
void test01(){
	map<int, int,compare>m;
	m.insert(pair<int, int>(3, 30));
	m.insert(pair<int, int>(4, 40));
	m.insert(pair<int, int>(5, 50));
	m.insert(pair<int, int>(2, 20));
	m.insert(pair<int, int>(1, 10));

	for (map<int, int, compare>::iterator it = m.begin(); it != m.end(); it++){
		cout << "key值为：  " << it->first << "   value值为：  " << it->second << endl;
	}
}
class myAdd{
public:
	int operator()(int v1, int v2){
		return v1 + v2;
	}
};
class myPrint{
public:
	 myPrint(){
		this->count = 0;
	}
	void operator()(string test){
		cout << test << endl;
		this->count++;
	}
	int count;
};
void test01(){
	/*myAdd myadd;
	cout << myadd(10, 10) << endl;*/

	myPrint myprint;
	myprint("hello,world");
	myprint("hello,world");
	myprint("hello,world");
	myprint("hello,world");

	cout << "调用次数为： " << myprint.count << endl;
}
void doPrint(myPrint &mp, string test){
	mp(test);
}
void test02(){
	myPrint myprint;
	doPrint(myprint, "hello c++");
}
class GreatFive{
public:
	bool operator()(int v1){
		return v1 > 5;
	}
};
void test01(){
	vector<int>v;

	for (int i = 0; i < 10; i++){
		v.push_back(i);
	}

	//查找容器中有没有大于5的数字
	vector<int>::iterator it=find_if(v.begin(), v.end(), GreatFive());
	if (it == v.end()){
		cout << "未找到" << endl;
	}
	else{
		cout << "找到啦" << *it << endl;
	}
}
void test01(){
	negate<int>n;
	cout << n(50) << endl;
}
void test02(){
	plus<int>p;
	cout << p(10, 20) << endl;
}
class MyCompare{
public:
	bool operator()(int v1, int v2){
		return v1 > v2;
	}
};
void test01(){
	vector<int>v;
	v.push_back(70);
	v.push_back(90);
	v.push_back(30);
	v.push_back(60);
	v.push_back(80);

	for (vector<int>::iterator it = v.begin(); it != v.end(); it++){
		cout << *it << " ";
	}
	cout << endl;
	/*sort(v.begin(), v.end(),MyCompare());*/
	sort(v.begin(), v.end(), greater<int>());

	for (vector<int>::iterator it = v.begin(); it != v.end(); it++){
		cout << *it << " ";
	}
	cout << endl;

}
void print01(int val){
	cout << val << " ";
}
class print02{
public:
	void operator()(int val){
		cout << val << endl;
	}
};
void test01(){
	vector<int>v;
	for (int i = 0; i < 10; i++){
		v.push_back(9-i);
	}

	for_each(v.begin(), v.end(), print01);
	cout << endl;

	for_each(v.begin(), v.end(), print02());
}
class Transform{
public:
	int operator()(int v){
		return v;
	}
};
class Myprint{
public:
	void operator()(int val){
		cout << val << " ";
	}
};
void test01(){
	vector<int>v;
	for (int i = 0; i < 10; i++){
		v.push_back(i);
	}
	vector<int>vTarget;
	vTarget.resize(v.size());
	transform(v.begin(), v.end(), vTarget.begin(), Transform());
	for_each(vTarget.begin(), vTarget.end(), Myprint());
}
void test01(){
	vector<int>v;
	for (int i = 0; i < 10; i++){
		v.push_back(i);
	}
	vector<int>::iterator it = find(v.begin(), v.end(), 5);
	if (it == v.end()){
		cout << "没有找到哟~" << endl;
	}
	else{
		cout << "找到啦~" << endl;
	}
}

class Person{

public:
	Person(string name, int age){
		this->m_Name = name;
		this->m_Age = age;
	}
	bool operator==(const Person& p){
		if (this->m_Name == p.m_Name && this->m_Age == p.m_Age){
			return true;
		}
		else{
			return false;
		}
	}
public:
	string m_Name;
	int m_Age;
	
};
class Person {
public:
	Person(string name, int age)
	{
		this->m_Name = name;
		this->m_Age = age;
	}
	//重载==
	bool operator==(const Person& p)
	{
		if (this->m_Name == p.m_Name && this->m_Age == p.m_Age)
		{
			return true;
		}
		return false;
	}

public:
	string m_Name;
	int m_Age;
};


void test01(){
	vector<Person>v;
	Person p1("a", 70);
	Person p2("b", 20);
	Person p3("c", 50);
	Person p4("d", 30);


	v.push_back(p1);
	v.push_back(p2);
	v.push_back(p3);
	v.push_back(p4);
	 
	vector<Person>::iterator it = find(v.begin(), v.end(), p2);
	if (it == v.end())
	{
		cout << "没有找到!" << endl;
	}
	else
	{
		cout << "找到姓名:" << it->m_Name << " 年龄: " << it->m_Age << endl;
	}

}
int main(){
	test01();
	/*test02();*/
}
void test01(){
	vector<int>v;
	for (int i = 0; i < 1000000; i++){
		v.push_back(i);
	}
	bool ret = binary_search(v.begin(), v.end(), 43966); 
		if (ret){
			cout << "找到啦~" << endl;
		}
		else{
			cout << "没有找到哟 " << endl;
		}
	}
void myPrint(int val){
	cout << val << " ";
}
void test01(){
	vector<int>v;

	v.push_back(1);
	v.push_back(43);
	v.push_back(56);
	v.push_back(64);
	v.push_back(23);
	sort(v.begin(), v.end());
	for_each(v.begin(), v.end(), myPrint);
		cout << endl;
		sort(v.begin(), v.end(),greater<int>());
		for_each(v.begin(), v.end(), myPrint);
		cout << endl;

		random_shuffle(v.begin(), v.end());
		for_each(v.begin(), v.end(), myPrint);
		cout << endl;
}

int main(){
	srand((unsigned int)time(NULL));
	test01();
}
void test01(){
	vector<int>v;

	for (int i = 0; i < 100000000; i++){
		v.push_back(i*i*i*i);
	}
unsigned long long total=	accumulate(v.begin(), v.end(), 0);
cout << total << endl;
}
void myprint(int val){
	cout << val << endl;
}
void test01(){
	vector<int>v1;
	vector<int>v2;
	for (int i = 0; i < 10; i++){
		v1.push_back(i);
		v2.push_back(i + 5);

	}
	
	vector<int>vTarget;
	vTarget.resize(v1.size() +v2.size());
vector<int>::iterator itend=set_intersection(v1.begin(), v1.end(), v2.begin(), v2.end(), vTarget.begin());
for_each(vTarget.begin(), itend, myprint);
cout << endl;
vTarget.resize(v1.size() + v2.size());
vector<int>::iterator itEnd = set_union(v1.begin(), v1.end(), v2.begin(), v2.end(), vTarget.begin());
	vTarget.resize(max(v1.size(), v2.size()));
	vector<int>::iterator itEnd = set_difference(v2.begin(), v2.end(), v1.begin(), v1.end(), vTarget.begin());
for_each(vTarget.begin(), itEnd,myprint);
	cout << endl;

}
int main(){
	test01();
}
