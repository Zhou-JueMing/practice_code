#define _CRT_SECURE_NO_WARNINGS 1
binbit.c
#include<stdio.h>
#include<limits.h>
char*itobs(int, char*);
void show_bstr(const char*);

int main(void)
{
	char bin_str[CHAR_BIT*sizeof(int)+1];
	int number;

	puts("Enter integer and see them in binary.");
	puts("Non-numeric input  terminates program.");
	while (scanf("%d", &number) == 1){
		itobs(number, bin_str);
		printf("%d is ", number);
		show_bstr(bin_str);
		putchar('\n');

	}
	puts("Bye!");
	return 0;
}
 
char*itobs(int n, char*ps){
	int i;
	const static int size = CHAR_BIT*sizeof(int);

	for (i = size - 1; i >= 0; i--, n >>= 1)
		ps[i] = (01 & n) + '0';
	ps[size] = '\0';
	return ps;
}
4位一组显示二进制显示符号
void show_bstr(const char*str){
	int i = 0;

	while (str[i])
	{
		putchar(str[i]);
		if (++i % 4 == 0 && str[i])
			putchar(' ');
	}
}
invert4.c
#include<stdio.h>
#include<limits.h>
char*itobs(int, char*);
void show_bstr(const char*);
int invert_end(int num, int bits);
int main(void){
	char bin_str[CHAR_BIT*sizeof(int)+1];

	int number;

	puts("Enter integer and see them in binary.");
		puts("Non-numeric input  terminates program.");
		while (scanf("%d", &number) == 1){
			itobs(number, bin_str);
			printf("%d is ", number);
			show_bstr(bin_str);
			putchar('\n');
			number = invert_end(number, 4); 
			printf("Inverting the last 4 bits gives\n");
			show_bstr(itobs(number, bin_str));
			putchar('\n');
		}
		puts("Bye.");
		return 0;

}
char*itobs(int n, char*ps){
		int i;
		const static int size = CHAR_BIT*sizeof(int);
	
		for (i = size - 1; i >= 0; i--, n >>= 1)
			ps[i] = (01 & n) + '0';
		ps[size] = '\0';
		return ps;
	}

	//4位一组显示二进制显示符号
	void show_bstr(const char*str){
		int i = 0;
	
		while (str[i])
		{
			putchar(str[i]);
			if (++i % 4 == 0 && str[i])
				putchar(' ');
		}
	}
	int invert_end(int num, int bits)
	{
		int mask = 0;
		int bitval = 1;

		while (bits-- > 0){
			mask |= bitval;
			bitval <<= 1;

		}
		return num^mask;
	}
线性表的实现
#define MAXSIZE 100//线性表储存空间的初始分配量
typedef struct{
	ElemType*elem;
	int length;

}Sqlist;
#include<stdio.h>
int main(void)
{
	int n;
	int	times=0;
	printf("please enter a integer to start(q to quit):\n");
	if (scanf("%d", &n) != 1)
		puts("Bye!");
	while (n != 1){
		if (n % 2 != 0){
			n = (3 * n + 1) / 2;
			times++;
		}
		else{
			n = n / 2;
			times++;
		}
	}
			
		printf("%d", times);
		
	
	return 0;
}
#include<stdio.h>
#define TWO 2
#define OW "consistency is the last refuge of the unimagina\
tive.-oscar wlide"
#define FOUR TWO*TWO
#define PX printf("X is %d",x)
#define FMT "x is %d.\n"

int main(void){
	int x = TWO;

	PX;
	x = FOUR;
	printf(FMT, x);
	printf("%s\n", OW);
	printf("TWO:OW\n");

	return 0;
}
#define _CRT_SECURE_NO_WARNINGS 1
binbit.c
#include<stdio.h>
#include<limits.h>
char*itobs(int, char*);
void show_bstr(const char*);

int main(void)
{
	char bin_str[CHAR_BIT*sizeof(int)+1];
	int number;

	puts("Enter integer and see them in binary.");
	puts("Non-numeric input  terminates program.");
	while (scanf("%d", &number) == 1){
		itobs(number, bin_str);
		printf("%d is ", number);
		show_bstr(bin_str);
		putchar('\n');

	}
	puts("Bye!");
	return 0;
}
 
char*itobs(int n, char*ps){
	int i;
	const static int size = CHAR_BIT*sizeof(int);

	for (i = size - 1; i >= 0; i--, n >>= 1)
		ps[i] = (01 & n) + '0';
	ps[size] = '\0';
	return ps;
}
4位一组显示二进制显示符号
void show_bstr(const char*str){
	int i = 0;

	while (str[i])
	{
		putchar(str[i]);
		if (++i % 4 == 0 && str[i])
			putchar(' ');
	}
}
invert4.c
#include<stdio.h>
#include<limits.h>
char*itobs(int, char*);
void show_bstr(const char*);
int invert_end(int num, int bits);
int main(void){
	char bin_str[CHAR_BIT*sizeof(int)+1];

	int number;

	puts("Enter integer and see them in binary.");
		puts("Non-numeric input  terminates program.");
		while (scanf("%d", &number) == 1){
			itobs(number, bin_str);
			printf("%d is ", number);
			show_bstr(bin_str);
			putchar('\n');
			number = invert_end(number, 4); 
			printf("Inverting the last 4 bits gives\n");
			show_bstr(itobs(number, bin_str));
			putchar('\n');
		}
		puts("Bye.");
		return 0;

}
char*itobs(int n, char*ps){
		int i;
		const static int size = CHAR_BIT*sizeof(int);
	
		for (i = size - 1; i >= 0; i--, n >>= 1)
			ps[i] = (01 & n) + '0';
		ps[size] = '\0';
		return ps;
	}

	//4位一组显示二进制显示符号
	void show_bstr(const char*str){
		int i = 0;
	
		while (str[i])
		{
			putchar(str[i]);
			if (++i % 4 == 0 && str[i])
				putchar(' ');
		}
	}
	int invert_end(int num, int bits)
	{
		int mask = 0;
		int bitval = 1;

		while (bits-- > 0){
			mask |= bitval;
			bitval <<= 1;

		}
		return num^mask;
	}
线性表的实现
#define MAXSIZE 100//线性表储存空间的初始分配量
typedef struct{
	ElemType*elem;
	int length;

}Sqlist;
#include<stdio.h>
int main(void)
{
	int n;
	int	times=0;
	printf("please enter a integer to start(q to quit):\n");
	if (scanf("%d", &n) != 1)
		puts("Bye!");
	while (n != 1){
		if (n % 2 != 0){
			n = (3 * n + 1) / 2;
			times++;
		}
		else{
			n = n / 2;
			times++;
		}
	}
			
		printf("%d", times);
		
	
	return 0;
}
#include<stdio.h>
#define TWO 2
#define OW "consistency is the last refuge of the unimagina\
tive.-oscar wlide"
#define FOUR TWO*TWO
#define PX printf("X is %d",x)
#define FMT "x is %d.\n"

int main(void){
	int x = TWO;

	PX;
	x = FOUR;
	printf(FMT, x);
	printf("%s\n", OW);
	printf("TWO:OW\n");

	return 0;
}
#define MAXSIZE 100
typedef struct{
	float coef;//系数
	int expn;//指数

}Polynomial;
typedef struct{
	Polynomial *elem;
	int length;
}SqList;
#define MAXSIZE 10000
typedef struct{
	char no[20];
	char name[50];
	float price;
}Book;
typedef struct{
	Book*elem;
	int length;
}SqList;
#include<stdio.h>
#define SQUARE(X) X*X
#define PR(X) printf("The result is %d.\n",X)
int main(void){
	int x = 5;
	int z;

	z = SQUARE(x);
	printf("Evaluating SQUARE(X):");
	PR(z);
	z = SQUARE(2);
	printf("Evaluating SQUARE(2):");
	PR(z);
	printf("Evaluating SQUARE(X+2):");
	PR(SQUARE(x+2));
	printf("Evaluating 100/SQUARE(X):");
	PR(100/SQUARE(2));
	printf("x is %d.\n", x);
	printf("Evaluating SQUARE(++x):");
	PR(SQUARE(++x));
	printf("After incrementing ,x is %x.\n", x);

	return 0;




#include<stdio.h>
#include<math.h>
#define PR(X,...) printf("Message "#X":" __VA_ARGS__)
int main(void){
	double x = 48;
	double y;

	y = sqrt(x);
	PR(1, "x=%g\n", x);
	PR(2, "x=%.2f,y=%.4f\n", x, y);

	return 0;

}
#include<stdio.h>
void why_me();
int main(void){
	printf("the file is %s.\n",__FILE__);
	printf("the date is %s.\n", __DATE__);
	printf("the time is %s.\n", __TIME__);
	printf("this is line %d.\n", __LINE__);
	why_me();
	
	return 0;
}
void why_me()
{
	printf("this is line %d.\n", __LINE__);
}

#include<stdio.h>
#include<math.h>

#define RAD_TO_DEG  (180/(4*atan(1)))

typedef struct polar_v{
	double magnitude;
	double angle;
}Polar_V;

typedef struct rect_v{
	double x;
	double y; 

}Rect_V;
Polar_V rect_to_polar(Rect_v);
int main(void){
	Rect_V input;
	Polar_V result;

	puts("enten x and y coordinates;enter q to quit:");
	while (scanf("%lf %lf", &input.x, &input.y) == 2){

		result = rect_to_polar(input);
		printf("magnitude =%0.2f,angl=%0.2f\n", result.magnitude, result.angle);

	}
	puts("Bye!");
	return 0;
}
Polar_V rect_to_polar(Rect_V rv){ 
	Polar_V pv;

	pv.magnitude = sqrt(rv.x*rv.x + rv.y*rv.y);
	if (pv.magnitude == 0)
		pv.angle = 0.0;
	else
		pv.angle = RAD_TO_DEG*atan2(rv.y, rv.x);
}
#include<stdio.h>
#include<stdlib.h>
void sign_off(void);
void  too_bad(void);
int main(void){
	int n;

	atexit(sign_off);
	puts("Enter an integer:");
	if (scanf("%d", &n) != 1){
		puts("thst's no integer!");
		atexit(too_bad);
		exit(EXIT_FAILURE);
	}
	printf("%d is %s ", n, (n % 2 == 0) ? "even" : "odd");

	return 0;
}
void sign_off(void){
	puts("thus terminates  another magnificent program from");
	puts("seesaw software!");
}
void too_bad(void){
	puts("seesaw terminates extengs its heartfelt condolences");
	puts("to you upon the failure of your program.");
}
qsort函数
#include<stdio.h>
#include<stdlib.h>

#define NUM 40
void fillarray(double ar[], int n);
void showarray(const double ar[], int  n);
int mycomp(const void *p1, const void*p2);

int main(void)
{
	double vals[NUM];
	fillarray(vals, NUM);
	puts("Random list;");
	showarray(vals, NUM);
	qsort(vals, NUM, sizeof(double), mycomp);
	puts("\nsorted list:");
	showarray(vals, NUM);
	return 0;
}
void fillarray(double ar[], int n)
{
	int index;

	for (index = 0; index < n; index++)
		ar[index] = (double) rand() / ((double) rand() + 0.1);

}

void showarray(const double ar[], int n){
	int index;
	for (index = 0; index < n; index++)
	{
		printf("%9.4f", ar[index]);
		if (index % 6 == 5)
			putchar('\n');
	}
	if (index % 6 != 0)
		putchar('\n');
}
int mycomp(const void*p1, const void*p2)
{
	const double*a1 = (const double*)p1;
	const double *a2 = (const double*)p2;
	if (*a1 < *a2)
		return -1;
	else if (a1 == a2)
		return 0;
	else
		return 1;

}
#include<stdio.h>
#include<string.h>
#include<stdlib.h>
#define SIZE 10
void show_array(const int ar[], int n);
//_Static_assert(sizeof(double) == 2 * sizeof(int), "double not twice int size");
int main(){

	int values[SIZE] = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 };
	int target[SIZE];
	double curious[SIZE / 2] = { 2.0, 2.0E5, 2.0E10, 2.0E20, 5.0E30 };

	puts("memcpy() used:");
	puts("values (original data):");
	show_array(values, SIZE);
	memcpy(target, values, SIZE*sizeof(int));
	puts("target(copy of values):");
	show_array(target, SIZE);

	puts("\nUsing memmove() with overlapping ranges:");
	memmove(values + 2, values, 5 * sizeof(int));
	puts("values--elemenets 0-4 copied to 2-6:");
	show_array(values, SIZE);

	puts("\nusing memcpy() to copy double to int :");
	memcpy(target, curious, (SIZE / 2)*sizeof(double));
	puts("target--5 doubles into 10 int poisitions : ");
	show_array(target, SIZE / 2);
	show_array(target + 5, SIZE / 2);

	return 0;
}

void show_array(const int ar[], int n){
	int i;
	for (i = 0; i < n; i++)
		printf("%d ", ar[i]);
	putchar('\n');
}
#include<stdio.h>
#include<stdarg.h>
double sum(int, ...);
int main(void)
{
	double s, t;
	s = sum(3, 1.1, 2.5, 13.3);
	t = sum(6, 1.1, 2.1, 13.1, 4.1, 5.1, 6.1);
	printf("return value for"
		"sum(3,1.1,2.5,13.3:          %g\n", s);
	printf("return value for"
		"sum(6,1.1,2.1,13.1,4.1,5.1,6.1):%g\n", t);
	return 0;
}
double sum(int lim, ...){
	va_list ap;
	double tot = 0;
	int i;

	va_start(ap, lim);
	for (i = 0; i < lim; i++)
		tot += va_arg(ap, double);
	va_end(ap);

	return tot;
}
顺序表的实现
#define MAXSIZE 100
typedef struct{
	ElemType *elem;
	int length;
}SqList;
图书表的顺序存储结构类型定义
#define MAXSIZE 100

typedef struct{
	char IsbnNumber[20];
	char BookName[50];
	float BookPrice;
}Book;
typedef struct{
	Book*elem;
	int length;
}SqList;
给动态分配内存的数组分配空间
l.data=(elemtype*)malloc(sizeof(elemtype)*MAXSIZE);
线性表的初始化
